{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Movies\\\\movies\\\\src\\\\ListMovies.js\";\nimport React from 'react';\nimport { GiMagnifyingGlass } from \"react-icons/gi\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\nimport RedirectButton from './Redirect';\nimport { useSelector } from 'react-redux'; // export default function MoviesList(){\n//     const [selected, setSelected] = useState(false)\n//     const [yearSelected, setYear] = useState(0)\n//     const [movieName, movie] = useState(\"\")\n//     var years = [1999,2000,2001,2002,2018]\n//     var feedBack = \"\"\n//     if(!selected){\n//      feedBack = \"You have not selected a movie yet\" \n//     }else if(Response ===\"False\"){\n//      feedBack = \"Movie is not found\"\n//     } \n//     handleSelect =(eventkey)=>{\n//         console.log(eventkey, \" heo\")\n//         this.setState({yearSelected: eventkey})\n//     }\n//     myTextChangeHandler =(event)=>{\n//         this.setState({movieSearched : event.target.value})\n//     }\n//     fetchMovie=()=>{\n//         this.setState({selected:true})\n//         fetch(\"http://www.omdbapi.com/?apikey=3e3f65ea&t=\" + this.state.movieSearched  +\"&y\" + this.state.yearSelected)\n//         .then(response => response.json())\n//         .then(data => this.setState({data:data}))\n//     }      \n//         return(\n//             <div  className = \"ListPage\">\n//                 <h1>Search A Movie</h1>\n//                 <div className = \"ListBox\">                \n//                 <div className = \"filters\">\n//                     <div className =\"searchBar\">\n//                         <input className = \"searchField\"\n//                             type='text'\n//                             placeholder = \"Search by movie name\"\n//                             onChange = {this.myTextChangeHandler}\n//                         />\n//                         <GiMagnifyingGlass size = \"20px\" color = \"grey\"/>\n//                     </div>\n//                     <div className= \"dropDown\" >\n//                         <DropdownButton variant = \"success\" id = \"dropdown-basic-button\" title= \"year\" onSelect = {this.handleSelect}>\n//                             {years.map( year => <Dropdown.Item eventKey = {year}> {year} </Dropdown.Item>)}\n//                         </DropdownButton>\n//                     </div>    \n//                     <button className = \"btnn\" onClick = {this.fetchMovie}>Submit</button>\n//                 </div>              \n//                 <hr/>\n//                 <div>\n//                      {feedBack} \n//                      <p>Title: {this.state.data.Title}</p>\n//                      <p>Year:{this.state.data.Year}</p>\n//                      <RedirectButton movieData = {this.state.data}/>\n//                 </div>\n//             </div>\n//             </div>\n//         )\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class MoviesList extends React.Component {\n  constructor() {\n    super(); // const movie = useSelector(state=>state.UpdateReducer)\n\n    this.handleSelect = eventkey => {\n      console.log(eventkey, \" heo\");\n      this.setState({\n        yearSelected: eventkey\n      });\n    };\n\n    this.myTextChangeHandler = event => {\n      this.setState({\n        movieSearched: event.target.value\n      });\n    };\n\n    this.fetchMovie = () => {\n      this.setState({\n        selected: true\n      });\n      fetch(\"http://www.omdbapi.com/?apikey=3e3f65ea&t=\" + this.state.movieSearched + \"&y\" + this.state.yearSelected).then(response => response.json()).then(data => this.setState({\n        data: data\n      }));\n    };\n\n    this.state = {\n      yearSelected: 0,\n      movieSearched: \"\",\n      selected: false,\n      data: \"\"\n    };\n  }\n\n  render() {\n    var years = [1999, 2000, 2001, 2002, 2018];\n    var feedBack = \"\";\n\n    if (!this.state.selected) {\n      feedBack = \"You have not selected a movie yet\";\n    } else if (this.state.data.Response === \"False\") {\n      feedBack = \"Movie is not found\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ListPage\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Search A Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ListBox\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filters\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"searchBar\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"searchField\",\n              type: \"text\",\n              placeholder: \"Search by movie name\",\n              onChange: this.myTextChangeHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(GiMagnifyingGlass, {\n              size: \"20px\",\n              color: \"grey\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dropDown\",\n            children: /*#__PURE__*/_jsxDEV(DropdownButton, {\n              variant: \"success\",\n              id: \"dropdown-basic-button\",\n              title: \"year\",\n              onSelect: this.handleSelect,\n              children: years.map(year => /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n                eventKey: year,\n                children: [\" \", year, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 49\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btnn\",\n            onClick: this.fetchMovie,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [feedBack, /*#__PURE__*/_jsxDEV(RedirectButton, {\n            movieData: this.state.data\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 22\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/Movies/movies/src/ListMovies.js"],"names":["React","GiMagnifyingGlass","DropdownButton","Dropdown","RedirectButton","useSelector","MoviesList","Component","constructor","handleSelect","eventkey","console","log","setState","yearSelected","myTextChangeHandler","event","movieSearched","target","value","fetchMovie","selected","fetch","state","then","response","json","data","render","years","feedBack","Response","map","year"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {GiMagnifyingGlass} from \"react-icons/gi\"\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {DropdownButton, Dropdown} from 'react-bootstrap'\r\nimport RedirectButton from './Redirect';\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\n// export default function MoviesList(){\r\n//     const [selected, setSelected] = useState(false)\r\n//     const [yearSelected, setYear] = useState(0)\r\n//     const [movieName, movie] = useState(\"\")\r\n\r\n//     var years = [1999,2000,2001,2002,2018]\r\n//     var feedBack = \"\"\r\n//     if(!selected){\r\n//      feedBack = \"You have not selected a movie yet\" \r\n//     }else if(Response ===\"False\"){\r\n//      feedBack = \"Movie is not found\"\r\n//     } \r\n\r\n//     handleSelect =(eventkey)=>{\r\n//         console.log(eventkey, \" heo\")\r\n//         this.setState({yearSelected: eventkey})\r\n        \r\n//     }\r\n//     myTextChangeHandler =(event)=>{\r\n//         this.setState({movieSearched : event.target.value})\r\n//     }\r\n//     fetchMovie=()=>{\r\n//         this.setState({selected:true})\r\n//         fetch(\"http://www.omdbapi.com/?apikey=3e3f65ea&t=\" + this.state.movieSearched  +\"&y\" + this.state.yearSelected)\r\n//         .then(response => response.json())\r\n//         .then(data => this.setState({data:data}))\r\n//     }      \r\n//         return(\r\n//             <div  className = \"ListPage\">\r\n//                 <h1>Search A Movie</h1>\r\n//                 <div className = \"ListBox\">                \r\n//                 <div className = \"filters\">\r\n//                     <div className =\"searchBar\">\r\n//                         <input className = \"searchField\"\r\n//                             type='text'\r\n//                             placeholder = \"Search by movie name\"\r\n//                             onChange = {this.myTextChangeHandler}\r\n//                         />\r\n//                         <GiMagnifyingGlass size = \"20px\" color = \"grey\"/>\r\n//                     </div>\r\n//                     <div className= \"dropDown\" >\r\n//                         <DropdownButton variant = \"success\" id = \"dropdown-basic-button\" title= \"year\" onSelect = {this.handleSelect}>\r\n//                             {years.map( year => <Dropdown.Item eventKey = {year}> {year} </Dropdown.Item>)}\r\n//                         </DropdownButton>\r\n//                     </div>    \r\n//                     <button className = \"btnn\" onClick = {this.fetchMovie}>Submit</button>\r\n//                 </div>              \r\n//                 <hr/>\r\n//                 <div>\r\n//                      {feedBack} \r\n//                      <p>Title: {this.state.data.Title}</p>\r\n//                      <p>Year:{this.state.data.Year}</p>\r\n//                      <RedirectButton movieData = {this.state.data}/>\r\n//                 </div>\r\n//             </div>\r\n//             </div>\r\n            \r\n            \r\n//         )\r\n// }\r\n\r\n\r\n\r\nexport default class MoviesList extends React.Component{\r\n    constructor(){\r\n        super();\r\n        // const movie = useSelector(state=>state.UpdateReducer)\r\n        this.state = {yearSelected:0, movieSearched: \"\", selected:false, data :\"\"}\r\n    }\r\n\r\n    handleSelect =(eventkey)=>{\r\n        console.log(eventkey, \" heo\")\r\n        this.setState({yearSelected: eventkey})\r\n        \r\n    }\r\n    myTextChangeHandler =(event)=>{\r\n        this.setState({movieSearched : event.target.value})\r\n    }\r\n    fetchMovie=()=>{\r\n        this.setState({selected:true})\r\n        fetch(\"http://www.omdbapi.com/?apikey=3e3f65ea&t=\" + this.state.movieSearched  +\"&y\" + this.state.yearSelected)\r\n        .then(response => response.json())\r\n        .then(data => this.setState({data:data}))\r\n    }\r\n    render(){\r\n       var years = [1999,2000,2001,2002,2018]\r\n       var feedBack = \"\"\r\n       if(!this.state.selected){\r\n        feedBack = \"You have not selected a movie yet\" \r\n       }else if(this.state.data.Response ===\"False\"){\r\n        feedBack = \"Movie is not found\"\r\n       }       \r\n        return(\r\n            <div  className = \"ListPage\">\r\n                <h1>Search A Movie</h1>\r\n                <div className = \"ListBox\">                \r\n                <div className = \"filters\">\r\n                    <div className =\"searchBar\">\r\n                        <input className = \"searchField\"\r\n                            type='text'\r\n                            placeholder = \"Search by movie name\"\r\n                            onChange = {this.myTextChangeHandler}\r\n                        />\r\n                        <GiMagnifyingGlass size = \"20px\" color = \"grey\"/>\r\n                    </div>\r\n                    <div className= \"dropDown\" >\r\n                        <DropdownButton variant = \"success\" id = \"dropdown-basic-button\" title= \"year\" onSelect = {this.handleSelect}>\r\n                            {years.map( year => <Dropdown.Item eventKey = {year}> {year} </Dropdown.Item>)}\r\n                        </DropdownButton>\r\n                    </div>    \r\n                    <button className = \"btnn\" onClick = {this.fetchMovie}>Submit</button>\r\n                </div>              \r\n                <hr/>\r\n                <div>\r\n                     {feedBack} \r\n                     <RedirectButton movieData = {this.state.data}/>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            \r\n            \r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}