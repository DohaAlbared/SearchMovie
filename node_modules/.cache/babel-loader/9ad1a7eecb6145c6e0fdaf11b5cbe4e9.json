{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Movies\\\\movies\\\\src\\\\ListMovies.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { GiMagnifyingGlass } from \"react-icons/gi\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\nimport RedirectButton from './Redirect';\nimport { useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MoviesList() {\n  _s();\n\n  const movieData = useSelector(state => state.UpdateReducer);\n  var response = movieData;\n  console.log();\n  const [selected, setSelected] = useState(false);\n  const [year, setYear] = useState();\n  const [movie, setMovie] = useState();\n  var years = [1999, 2000, 2001, 2002, 2018];\n  var feedBack = \"\";\n\n  if (!selected) {\n    feedBack = \"You have not selected a movie yet\";\n  } else if (Response === \"False\") {\n    feedBack = \"Movie is not found\";\n  }\n\n  const handleSelect = eventkey => {\n    setYear(eventkey);\n  };\n\n  const myTextChangeHandler = event => {\n    setMovie(event.target.value);\n  };\n\n  const fetchMovie = () => {\n    setSelected(true);\n    fetch(\"http://www.omdbapi.com/?apikey=3e3f65ea&t=\" + movie + \"&y\" + year).then(response => response.json()).then(data => console.log(\"done\"));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ListPage\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Search A Movie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ListBox\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filters\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"searchBar\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"searchField\",\n            type: \"text\",\n            placeholder: \"Search by movie name\",\n            onChange: myTextChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(GiMagnifyingGlass, {\n            size: \"20px\",\n            color: \"grey\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropDown\",\n          children: /*#__PURE__*/_jsxDEV(DropdownButton, {\n            variant: \"success\",\n            id: \"dropdown-basic-button\",\n            title: \"year\",\n            onSelect: handleSelect,\n            children: years.map(year => /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n              eventKey: year,\n              children: [\" \", year, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 45\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btnn\",\n          onClick: fetchMovie,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [feedBack, /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Title: \", movie, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Year: \", year]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(RedirectButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 13\n  }, this);\n} // export default class MoviesList extends React.Component{\n//     constructor(){\n//         super();\n//         // const movie = useSelector(state=>state.UpdateReducer)\n//         this.state = {yearSelected:0, movieSearched: \"\", selected:false, data :\"\"}\n//     }\n//     handleSelect =(eventkey)=>{\n//         console.log(eventkey, \" heo\")\n//         this.setState({yearSelected: eventkey})\n//     }\n//     myTextChangeHandler =(event)=>{\n//         this.setState({movieSearched : event.target.value})\n//     }\n//     fetchMovie=()=>{\n//         this.setState({selected:true})\n//         fetch(\"http://www.omdbapi.com/?apikey=3e3f65ea&t=\" + this.state.movieSearched  +\"&y\" + this.state.yearSelected)\n//         .then(response => response.json())\n//         .then(data => this.setState({data:data}))\n//     }\n//     render(){\n//        var years = [1999,2000,2001,2002,2018]\n//        var feedBack = \"\"\n//        if(!this.state.selected){\n//         feedBack = \"You have not selected a movie yet\" \n//        }else if(this.state.data.Response ===\"False\"){\n//         feedBack = \"Movie is not found\"\n//        }       \n//         return(\n//             <div  className = \"ListPage\">\n//                 <h1>Search A Movie</h1>\n//                 <div className = \"ListBox\">                \n//                 <div className = \"filters\">\n//                     <div className =\"searchBar\">\n//                         <input className = \"searchField\"\n//                             type='text'\n//                             placeholder = \"Search by movie name\"\n//                             onChange = {this.myTextChangeHandler}\n//                         />\n//                         <GiMagnifyingGlass size = \"20px\" color = \"grey\"/>\n//                     </div>\n//                     <div className= \"dropDown\" >\n//                         <DropdownButton variant = \"success\" id = \"dropdown-basic-button\" title= \"year\" onSelect = {this.handleSelect}>\n//                             {years.map( year => <Dropdown.Item eventKey = {year}> {year} </Dropdown.Item>)}\n//                         </DropdownButton>\n//                     </div>    \n//                     <button className = \"btnn\" onClick = {this.fetchMovie}>Submit</button>\n//                 </div>              \n//                 <hr/>\n//                 <div>\n//                      {feedBack} \n//                      <RedirectButton movieData = {this.state.data}/>\n//                 </div>\n//             </div>\n//             </div>\n//         )\n//     }\n// }\n\n_s(MoviesList, \"BPyXFRzV/rGq6EEZa4YLgmRdBzg=\", false, function () {\n  return [useSelector];\n});\n\n_c = MoviesList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoviesList\");","map":{"version":3,"sources":["C:/Users/User/Desktop/Movies/movies/src/ListMovies.js"],"names":["React","GiMagnifyingGlass","DropdownButton","Dropdown","RedirectButton","useSelector","useState","MoviesList","movieData","state","UpdateReducer","response","console","log","selected","setSelected","year","setYear","movie","setMovie","years","feedBack","Response","handleSelect","eventkey","myTextChangeHandler","event","target","value","fetchMovie","fetch","then","json","data","map"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {GiMagnifyingGlass} from \"react-icons/gi\"\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {DropdownButton, Dropdown} from 'react-bootstrap'\r\nimport RedirectButton from './Redirect';\r\nimport { useSelector } from 'react-redux';\r\nimport { useState } from 'react';\r\n\r\nexport default function MoviesList(){\r\n    const movieData = useSelector(state=>state.UpdateReducer)\r\n    var response = movieData\r\n    console.log()\r\n    const [selected, setSelected] = useState(false)\r\n    const [year, setYear] = useState()\r\n    const [movie, setMovie] = useState()\r\n    \r\n\r\n    var years = [1999,2000,2001,2002,2018]\r\n    var feedBack = \"\"\r\n    if(!selected){\r\n     feedBack = \"You have not selected a movie yet\" \r\n    }else if(Response ===\"False\"){\r\n     feedBack = \"Movie is not found\"\r\n    } \r\n\r\n    const handleSelect =(eventkey)=>{\r\n        setYear(eventkey)\r\n        \r\n    }\r\n    const myTextChangeHandler =(event)=>{\r\n        setMovie( event.target.value)\r\n    }\r\n    const fetchMovie=()=>{\r\n        setSelected(true)\r\n        fetch(\"http://www.omdbapi.com/?apikey=3e3f65ea&t=\" + movie  +\"&y\" + year)\r\n        .then(response => response.json())\r\n        .then(data => console.log(\"done\"))\r\n    }      \r\n        return(\r\n            <div  className = \"ListPage\">\r\n                <h1>Search A Movie</h1>\r\n                <div className = \"ListBox\">                \r\n                <div className = \"filters\">\r\n                    <div className =\"searchBar\">\r\n                        <input className = \"searchField\"\r\n                            type='text'\r\n                            placeholder = \"Search by movie name\"\r\n                            onChange = {myTextChangeHandler}\r\n                        />\r\n                        <GiMagnifyingGlass size = \"20px\" color = \"grey\"/>\r\n                    </div>\r\n                    <div className= \"dropDown\" >\r\n                        <DropdownButton variant = \"success\" id = \"dropdown-basic-button\" title= \"year\" onSelect = {handleSelect}>\r\n                        {years.map( year => <Dropdown.Item eventKey = {year}> {year} </Dropdown.Item>)}\r\n                        </DropdownButton>\r\n                    </div>    \r\n                    <button className = \"btnn\" onClick = {fetchMovie}>Submit</button>\r\n                </div>              \r\n                <hr/>\r\n                <div>\r\n                     {feedBack} \r\n                     <p>Title: {movie} </p>\r\n                     <p>Year: {year}</p>\r\n                     <RedirectButton/>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            \r\n            \r\n        )\r\n}\r\n\r\n\r\n\r\n// export default class MoviesList extends React.Component{\r\n//     constructor(){\r\n//         super();\r\n//         // const movie = useSelector(state=>state.UpdateReducer)\r\n//         this.state = {yearSelected:0, movieSearched: \"\", selected:false, data :\"\"}\r\n//     }\r\n\r\n//     handleSelect =(eventkey)=>{\r\n//         console.log(eventkey, \" heo\")\r\n//         this.setState({yearSelected: eventkey})\r\n        \r\n//     }\r\n//     myTextChangeHandler =(event)=>{\r\n//         this.setState({movieSearched : event.target.value})\r\n//     }\r\n//     fetchMovie=()=>{\r\n//         this.setState({selected:true})\r\n//         fetch(\"http://www.omdbapi.com/?apikey=3e3f65ea&t=\" + this.state.movieSearched  +\"&y\" + this.state.yearSelected)\r\n//         .then(response => response.json())\r\n//         .then(data => this.setState({data:data}))\r\n//     }\r\n//     render(){\r\n//        var years = [1999,2000,2001,2002,2018]\r\n//        var feedBack = \"\"\r\n//        if(!this.state.selected){\r\n//         feedBack = \"You have not selected a movie yet\" \r\n//        }else if(this.state.data.Response ===\"False\"){\r\n//         feedBack = \"Movie is not found\"\r\n//        }       \r\n//         return(\r\n//             <div  className = \"ListPage\">\r\n//                 <h1>Search A Movie</h1>\r\n//                 <div className = \"ListBox\">                \r\n//                 <div className = \"filters\">\r\n//                     <div className =\"searchBar\">\r\n//                         <input className = \"searchField\"\r\n//                             type='text'\r\n//                             placeholder = \"Search by movie name\"\r\n//                             onChange = {this.myTextChangeHandler}\r\n//                         />\r\n//                         <GiMagnifyingGlass size = \"20px\" color = \"grey\"/>\r\n//                     </div>\r\n//                     <div className= \"dropDown\" >\r\n//                         <DropdownButton variant = \"success\" id = \"dropdown-basic-button\" title= \"year\" onSelect = {this.handleSelect}>\r\n//                             {years.map( year => <Dropdown.Item eventKey = {year}> {year} </Dropdown.Item>)}\r\n//                         </DropdownButton>\r\n//                     </div>    \r\n//                     <button className = \"btnn\" onClick = {this.fetchMovie}>Submit</button>\r\n//                 </div>              \r\n//                 <hr/>\r\n//                 <div>\r\n//                      {feedBack} \r\n//                      <RedirectButton movieData = {this.state.data}/>\r\n//                 </div>\r\n//             </div>\r\n//             </div>\r\n            \r\n            \r\n//         )\r\n//     }\r\n// }"]},"metadata":{},"sourceType":"module"}